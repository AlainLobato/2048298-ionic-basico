Tipos de datos:

NO HAY QUE PONER INT, FLOAT, ETC

let variable alcance local
const constante (global)

NaN = Not a Number (Error: cuando haces una operacion sin numeros)

alert( ): Muestra ventana de salida de datos

prompt(" "): Muestra ventana para entrada de datos
(let nombre = prompt("Nombre: ");

document.write( ) Imprime lo que le pidamos

CONCATENAR:

"" + num + num2; (forzar string)
`Hola ${nombre}, buen dia` IMPORTANTE NO USAR COMILLAS

LOS OPERADORES DE COMPARACION FUNCIONAN CON STRING:
let texto = "SI"
let texto1 = "NO"
document.write(texto == texto1);

El === (o el !==) pregunta si son iguales (sin importar el tipo de dato)
// o CTRL + } Para comentar

parseInt( ): Convertir a numero

Formas de llamar con arreglo

let humano = {
	nombre: "Alain",
	apellido: "Lobato"
};

document.write(humano["nombre"]);

ETIQUETAS DE HTML SIRVEN (ENTRE COMILLAS "<br>")

break; (salir del ciclo)
continue; (saltar esa iteracion)

CICLOS FOR:

nombres = ["Alain", "Noe"];

for in: RECORRE POSICIONES (0, 1)
for(nombre in nombres){
	document.write(nombre);
}

for of: LEE LO QUE VALE LA VARIABLE (Alain, Noe)
for(nombre of nombres){
	document.write(nombre);
}

LABEL:

- Darle un nombre a una parte del codigo sin inducirla a una funcion.

FUNCIONES:

Empezar siempre con function para definir

function nombre(){

}

Otra forma es:

const nombre = ()=>{

}

POO:

Crear clases

class animal{
	constructor(especie,color){
		this.especie = especie;
		this.color = color;
	(con esto seleccionamos el objeto e indicamos 
	que el atributo es igual al parametro que
	le dimos	
	}
}

Crear objeto:

const perro = new animal("perro","negro");

para acceder a atributos perro.especie;


Metodos (dentro de la clase)

verInfo(){
	document.write(this.info);
} (Metodo para ver info)

Para HEREDAR:

class perro extends animal{
	constructor(especie, color, raza)
	super(especie, color) (AQUI HEREDA DE LA 
	CLASE ANIMAL ESTO)
}

(OJO: NO SE PUEDE TENER VARIABLE CON EL MISMO
NOMBRE QUE UN OBJETO)

static:

Para que algun metodo que no ocupe informacion de la
clase pueda ser ejecutado. No necesita un objeto 
declarado para usarse, puede usarse solo con la
clase

SETTER: (Modificar atributos)
DENTRO DE CLASE PERRO

set setRaza(newName){
	this.raza = newName;
}

GETTER: (Obtiene el atributo)
DENTRO DE CLASE PERRO

get getRaza(){
	return this.raza;
}

perro.modificarRaza = "Shitzu";


METODOS DE CADENA:

concat(): junta cadenas y retorna una nueva

startsWith(): devuelve true o false si una cadena
empieza con otra

endWith(): lo mismo que la de arriba pero si 
finaliza

includes(): nos indica si una cadena se encuentra
dentro de otra

indexOf(): busca si se encuentra una palabra y si
esta, nos devuelve la posicion de la primer letra
de esa palabra, devuelve -1 si no esta

lastIndexOf(): busca si se encuentra una palabra y si
esta, nos devuelve la posicion de la primer letra
de esa palabra, pero de la ultima vez que se 
menciono, devuelve -1 si no esta

padStart(2, "a"): rellena una cadena al principio
con la cadena dada ("a") hasta tener la cantidad de
elementos deseados (2)

padEnd(2, "a"): rellena una cadena al final
con la cadena dada ("a") hasta tener la cantidad de
elementos deseados (2)

repeat(): repite la cadena la cantidad de veces que
le pidamos

split(","): Separa por palabras una cadena
cadena = "Hola,como,estas"
r = cadena.split(",")
document.write(r[0])
----> Hola

tambien nos elimina de la cadena una palabra si
se la pasamos como parametro

substring(0,2): Nos crea una nueva cadena a partir
de otra, empezando y terminando en los parametros de
posicion que le demos

toLowerCase():
toUpperCase():

toString(): convierte algun dato en una cadena

cadena.length: devuelve cuantos caracteres tiene
una cadena

trim(): elimina los espacios de una cadena
trimEnd(): elimina los espacios del final
trimStart(): elimina los espacios del principio


METODOS DE ARRAYS:

pop(): lee y elimina el ultimo elemento del array
shift(): lee y elimina el primer elemento del array
push(" "): agrega un elemento al final del array y 
devuelve su posicion

reverse(): invierte el array

unshift(): agrega elementos al inicio del array  
sort(): ordena el array

splice(1,3): elimina los elementos siguientes desde
la posicion que le mandemos (1) hasta la posicion
que le indiquemos (3).Si le damos un tercer
argumento nos reemplaza lo que quitamos por eso.
Tambien nos podria servir para agregar elementos
en alguna posicion en especifico si le damos un
parametro 0 en los elementos a eliminar. Si ponemos
-1 nos lo agrega en penultimo


METODOS ACCESORES: (JUNTO CON ARRAYS)

join(" - "): nos convierte el array a un string y
nos separa los elementos con lo que queramos
slice(0,2): nos devuelve los elementos de un 
array desde el elemento dado (0) hasta el que
le indiquemos (2). Si ponemos -1 nos devuelve todos
menos el ultimo. Si dejamos el segundo parametro
vacio nos devuelve todos

TODOS LOS METODOS DE CADENA PUEDEN USARSE EN ARRAYS


METODOS DE REPETICION (JUNTO CON ARRAYS)

filter(): devuelve por cada vuelta cada elemento
del array

UNO DE SUS USOS: Crea un nuevo array
y lee solo los elementos mayores a 4 letras

resultado = numero.filter(numero =>
numero.leigth > 4);


OBJETO MATH:

Math.sqrt(): Raiz cuadrada
Math.cbrt(): Raiz cubica
Math.max(): Devuelve el numero mas grande
Math.min(): Devuelve el numero mas pequeño
Math.random(): Devuelve un numero entre 0 y 1
Math.round(): Redondea al numero mas cercano
Math.floor(): Redondea para abajo
Math.fround(): Convierte un numero decimal mas corto
Math.trunc(): Elimina los decimales
Math.PI(): Numero PI
Math.SQRT1_2: Raiz de 1/2
Math.SQRT2: Raiz de 2
Math.E: Numero de euler
Math.LR2: ln(2)
Math.LN10: ln(19)
Math.LOG2E: log2(e)
Math.LOG10E: log10(e)


USO DE CONSOLA PARA ERRORES (OBJETO):

clear(): limpia la consola

error(" "): nos muestra un error definido

info(): nos muestra en consola un mensaje

log(): igual a info()

table(): si le damos un array, nos crea una tabla
en consola

warn(" "): manda una advertencia

count(): nos cuenta (por ejemplo, cuantas veces se
ejecuto una funcion)

countReset(): reinicia el conteo

group(): crea un grupo abierto de lineas en 
consola (para cerrar o abrir como si estuviera 
entre {})

groupEnd(): cierra el grupo

groupCollapsed(): crea un grupo ya cerrado

time(): Empieza un contador
timeLog(): Nos muestra el tiempo que lleva
timeEnd(): Termina el conteo y nos muestra cuanto
pasó

SE PUEDE MODIFICAR EL ESTILO DE TEXTO EN CONSOLA
console.log("%cERROR", "color: red");


DOM:

Nodos: cualquier etiqueta del body

- Document: nodo raiz
- Element: nodo definido por etiqueta html
- Text: texto dentro de nodo element
- Atribute: los atributos de las etiquetas
- Comentarios: del tipo <!-- -->


DOCUMENT: (OBJETO document.x)

- getElementById(): selecciona un elemento 
por ID. (id en HTML)

- getElementsByTagName("p"): selecciona todas 
las etiquetas de un grupo (<p> por ejemplo). 
Devuelve una lista de elementos y podemos
acceder como si fuera un array

- querySelector(".portada"): Devuelve el primer
elemento que coincida con el grupo que le demos
de selectores (class = "portada" se selecciona
con ".portada")

- querySelectorAll(): Devuelve todos los
elementos que coincidan. Se puede seleccionar
igual como un array


MODIFICAR ATRIBUTOS:

setAttribute("type", "text"): modifica o crea 
un atributo (cambia el tipo a text)

getAttribute("type"): obtiene el atributo

removeAttribute("type"): elimina el atributo


ATRIBUTOS GLOBALES:

contentEditable = podemos editar directamente
de la pagina

dir = ltr (left to right) y rtl (al reves)

hidden = nos oculta un elemento

tabIndex = Nos ayuda a seleccionar con TAB

title = Al poner mouse encima nos muestra un
mensaje


ACCEDER A ATRIBUTOS DE INPUT:(input.x)

className: nos muestra nombre de la clase

value: nos muestra el valor del input

type = nos muestra el tipo e igual podemos
modificar

accept = nos indica que puede aceptar el input
si es un type file

form = puede agregarnos un input (submit por ej)
dentro de un form aun si no esta dentro de la
etiqueta 

minLength = el minimo de caracteres que tiene
que tener

placeholder = nos muestra algun ejemplo dentro
del input antes de escribir

required = campo necesario para avanzar


style: modifica el estilo (USO DE CAMEL CASE)
style.color = "red"
style.backgroundColor


CLASS LIST: (modifica las clases)
(element.classList.x)

add("grande"): añade una clase 

remove("grande"): elimina una clase

item(1): devuelve la clase 1

contains("grande"): devuelve true o false
si contiene la clase

toggle("grande"): agrega una clase si no la
tiene y si la tiene la elimina, devuelve true
o false

replace("grande", "peque"): reemplaza una clase
por otra, devuelve true o false



OBTENCION Y MODIFICACION DE ELEMENTOS:
(elemento.x)

innerText: devuelve el texto de cualquier nodo

innerHTML: devuelve el contenido HTML

outerHTML: devuelve toda la etiqueta, el codigo
completo


CREACION DE ELEMENTOS: (document.x)

createElement("LI"): crea un elemento (se
nombra con mayusculas)

createTextNode( ): crea un nodo de texto

createDocumentFragment(): agrega mas de un 
elemento al documento


METODOS DE CHILDS (HIJOS, NODOS DENTRO DE
OTROS)

appendChild(): agrega dentro de elemento a otro
(por ejemplo, un TextNode dentro de un 
createElement)

replaceChild(new, old): reemplaza un hijo por
otro

removeChild(h2_old): removemos un hijo al que
ya le hayamos asignado una variable

hasChildNodes(): verifica si un padre tiene
hijos o no


PROPIEDADES DE PADRES:

parentNode: busca el nodo padre que sea
elemento node

parentElement: busca el nodo padre que sea
elemento DOM


METODOS DE HERMANOS (SIBLINGS):

nextSibling: muestra el siguiente hermano

previousSibling: muestra el hermano anterior

nextElementSibling: muestra el hermano
siguiente que sea elemento

previousElementSibling: muestra el hermano
anterior que sea elemento


METODO CLOSEST:

closest(".div"): busca el padre mas cercano
que contenga la clase div
OBTENCION Y MODIFICACION DE CHILDS:

firstChild: nos indica el primer hijo

lastChild: ultimo hijo

firstElementChild: nos indica el primer
elemento hijo

lastElementChild: el ultimo elemento hijo

childNodes: nos devuelve la lista de nodos
de hijos (con espacios)

children: nos devuelve la lista de elementos 
(sin espacios)

  

